import html2canvas from "html2canvas";
import styled, { css } from "styled-components";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { __takeFrame, __takePhoto } from "../redux/modules/photoSlice";
import { useNavigate, useParams } from "react-router-dom";
import { dataURLtoFile } from "../components/file/dataURLtoFile";
import { MdMeetingRoom } from "react-icons/md";
import Button from "../components/button/Button";
import Swal from "sweetalert2";
import Span from "../components/button/Span";
import toast, { Toaster } from "react-hot-toast";
import { useRef } from "react";

const OneCamera = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();

    const { roomId } = useParams();

    const videoRef = useRef(null);

    useEffect(() => {
        const getUserMedia = async () => {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: { width: 430, height: 630 },
                    audio: true,
                    // mirror: true, ÌôïÏù∏ ÌõÑ Ï†ÅÏö©
                });
                videoRef.current.srcObject = stream;
            } catch (err) {}
        };
        getUserMedia();
    }, []);

    // ÏÇ¨ÏßÑ Í∞ÅÍ∞Å Ï†ÄÏû• Í¥ÄÎ†®
    const [photo_one, setPhoto_one] = useState("");
    const [photo_two, setPhoto_two] = useState("");
    const [photo_three, setPhoto_three] = useState("");
    const [photo_four, setPhoto_four] = useState("");

    // Î≤ÑÌäº Í∞ÅÍ∞Å disabled Í¥ÄÎ†®
    const [oneDis, setOneDis] = useState(false);
    const [twoDis, setTwoDis] = useState(false);
    const [threeDis, setThreeDis] = useState(false);
    const [fourDis, setFourDis] = useState(false);

    const [saveDisabled, setSaveDisabled] = useState(true);

    // Ïπ¥Ïö¥ÌÑ∞ Í¥ÄÎ†®
    const [number, setNumber] = useState(3);
    const number_ref = useRef(3);

    useEffect(() => {
        dispatch(__takeFrame(roomId));
    }, [dispatch, roomId]);

    // Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
    const rooms = useSelector((state) => state.photos.photoinfo.data1);
    const videoRooms = useSelector((state) => state.videos.videoRooms);

    // Î∞© ÎÇòÍ∞ÄÍ∏∞ Ìï∏Îì§Îü¨
    const outRoomsHandler = (roomId) => {
        Swal.fire({
            title: "Î∞© ÎÇòÍ∞ÄÍ∏∞Î•º ÌïòÎ©¥ Ïó∞Í≤∞Ïù¥ ÎÅäÏñ¥ÏßëÎãàÎã§",
            text: "Îã§Ïãú ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§",
            icon: "warning",

            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Î∞© ÎÇòÍ∞ÄÍ∏∞",
            cancelButtonText: "Í∑∏ÎåÄÎ°ú ÏûàÍ∏∞",

            reverseButtons: true,
        }).then((result) => {
            if (result.isConfirmed) {
                navigate("/roomOpen");
            }
        });
    };

    // ÏÇ¨ÏßÑ Ï†ÑÏÜ°ÌïòÎü¨ Í∞ÄÍ∏∞ Î≤ÑÌäº Ìï∏Îì§Îü¨
    const pageMoveHandler = () => {
        Swal.fire({
            title: "ÏÇ¨ÏßÑÏùÑ ÎÑ§Ïû• Îã§ Ï∞çÏóàÎÇòÏöî?",
            text: "ÏÇ¨ÏßÑÏùÑ Îã§ Ï∞çÏßÄ ÏïäÏïòÏúºÎ©¥ ÏÇ¨ÏßÑÏù¥ Ï†ÄÏû•ÎêòÏßÄ ÏïäÏäµÎãàÎã§",
            icon: "warning",

            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Ï†ÑÏÜ°ÌïòÎü¨ Í∞ÄÍ∏∞",
            cancelButtonText: "Í∑∏ÎåÄÎ°ú ÏûàÍ∏∞",

            reverseButtons: true,
        }).then((result) => {
            if (result.isConfirmed) {
                toast.success("ÏÇ¨ÏßÑÏùÑ Ï†ÄÏû•Ï§ëÏûÖÎãàÎã§", {
                    style: {
                        borderRadius: "10px",
                        background: "#3a3232",
                        color: "#fffaf2",
                    },
                    iconTheme: {
                        primary: "#fffaf2",
                        secondary: "#3a3232",
                    },
                });
                navigate(`/loading/${roomId}`);
            }
        });
    };

    // ÏÉàÎ°úÍ≥†Ïπ® ÎßâÍ∏∞ Ìï∏Îì§Îü¨
    const onbeforeunload = (event) => {
        event.preventDefault();
        event.returnValue = "";
    };

    useEffect(() => {
        window.addEventListener("beforeunload", onbeforeunload);

        // Îí§Î°ú Í∞ÄÍ∏∞ Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî Í¥ÄÎ†®
        const preventGoBack = () => {
            window.history.pushState(null, "", window.location.href);
            toast.error("Î∞© ÎÇòÍ∞ÄÍ∏∞Î•º ÎàåÎü¨Ï£ºÏÑ∏Ïöî!", {
                style: {
                    borderRadius: "10px",
                    background: "#fffaf2",
                    color: "#3a3232",
                },
                iconTheme: {
                    primary: "#3a3232",
                    secondary: "#fffaf2",
                },
            });
        };

        window.history.pushState(null, "", window.location.href);
        window.addEventListener("popstate", preventGoBack);

        return () => {
            window.removeEventListener("popstate", preventGoBack);
            window.removeEventListener("beforeunload", onbeforeunload);
        };
    }, []);

    // ÌôîÎ©¥ Ïä§ÌÅ¨Î¶∞ÏÉ∑ Î∞è serverÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Í¥ÄÎ†® Í∞Å Ìï∏Îì§Îü¨
    const onSubmitHandler_1 = () => {
        // 3Ï¥à ÌõÑ ÏÑúÎ≤ÑÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
        html2canvas(document.querySelector("#picture1"))
            .then((canvas) => {
                let photo_one =
                    (canvas.toDataURL("image/jpg"), "photo_one.jpg");
                setPhoto_one(canvas.toDataURL(photo_one));
            })
            .then(() => {
                const file = dataURLtoFile(photo_one, "photo_one.jpg");

                const photo_1 = new FormData();

                photo_1.append("photo_1", file);

                // 3Ï¥à Îí§ Ï¥¨ÏòÅ ÏãúÏûë Í¥ÄÎ†® Ïπ¥Ïö¥ÌÑ∞
                const cameraCount = setInterval(() => {
                    number_ref.current -= 1;
                    setNumber(number_ref.current);
                    if (number_ref.current === 0) {
                        clearInterval(cameraCount);
                        setNumber((number_ref.current = 3));
                    }
                }, 1000);

                setTimeout(() => {
                    dispatch(__takePhoto({ roomId, formdata: photo_1 })).then(
                        (res) => {
                            toast.success("1Î≤à ÏÇ¨ÏßÑ Ï¥¨ÏòÅ ÏôÑÎ£å!", {
                                icon: "üì∏",
                                style: {
                                    borderRadius: "10px",
                                    background: "#3a3232",
                                    color: "#fffaf2",
                                },
                                duration: 2000,
                            });
                            setOneDis(true);
                        }
                    );
                }, 3000);
            });
    };

    const onSubmitHandler_2 = () => {
        html2canvas(document.querySelector("#picture1"))
            .then((canvas) => {
                let photo_two =
                    (canvas.toDataURL("image/jpg"), "photo_two.jpg");
                setPhoto_two(canvas.toDataURL(photo_two));
            })
            .then(() => {
                const file = dataURLtoFile(photo_two, "photo_two.jpg");

                const photo_2 = new FormData();

                photo_2.append("photo_2", file);

                const cameraCount = setInterval(() => {
                    number_ref.current -= 1;
                    setNumber(number_ref.current);
                    if (number_ref.current === 0) {
                        clearInterval(cameraCount);
                        setNumber((number_ref.current = 3));
                    }
                }, 1000);

                setTimeout(() => {
                    dispatch(__takePhoto({ roomId, formdata: photo_2 })).then(
                        (res) => {
                            toast.success("2Î≤à ÏÇ¨ÏßÑ Ï¥¨ÏòÅ ÏôÑÎ£å!", {
                                icon: "üì∏",
                                style: {
                                    borderRadius: "10px",
                                    background: "#3a3232",
                                    color: "#fffaf2",
                                },
                                duration: 2000,
                            });
                            setTwoDis(true);
                        }
                    );
                }, 3000);
            });
    };

    const onSubmitHandler_3 = () => {
        html2canvas(document.querySelector("#picture1"))
            .then((canvas) => {
                let photo_three =
                    (canvas.toDataURL("image/jpg"), "photo_three.jpg");
                setPhoto_three(canvas.toDataURL(photo_three));
            })
            .then(() => {
                const file = dataURLtoFile(photo_three, "photo_three.jpg");

                const photo_3 = new FormData();

                photo_3.append("photo_3", file);

                const cameraCount = setInterval(() => {
                    number_ref.current -= 1;
                    setNumber(number_ref.current);
                    if (number_ref.current === 0) {
                        clearInterval(cameraCount);
                        setNumber((number_ref.current = 3));
                    }
                }, 1000);

                setTimeout(() => {
                    dispatch(__takePhoto({ roomId, formdata: photo_3 })).then(
                        (res) => {
                            toast.success("3Î≤à ÏÇ¨ÏßÑ Ï¥¨ÏòÅ ÏôÑÎ£å!", {
                                icon: "üì∏",
                                style: {
                                    borderRadius: "10px",
                                    background: "#3a3232",
                                    color: "#fffaf2",
                                },
                                duration: 2000,
                            });
                            setThreeDis(true);
                        }
                    );
                }, 3000);
            });
    };

    const onSubmitHandler_4 = () => {
        html2canvas(document.querySelector("#picture1"))
            .then((canvas) => {
                let photo_four =
                    (canvas.toDataURL("image/jpg"), "photo_four.jpg");
                setPhoto_four(canvas.toDataURL(photo_four));
            })
            .then(() => {
                const file = dataURLtoFile(photo_four, "photo_four.jpg");

                const photo_4 = new FormData();

                photo_4.append("photo_4", file);

                const cameraCount = setInterval(() => {
                    number_ref.current -= 1;
                    setNumber(number_ref.current);
                    if (number_ref.current === 0) {
                        clearInterval(cameraCount);
                        setNumber((number_ref.current = 3));
                    }
                }, 1000);

                setTimeout(() => {
                    dispatch(__takePhoto({ roomId, formdata: photo_4 })).then(
                        (res) => {
                            setFourDis(true);
                            toast.success("4Î≤à ÏÇ¨ÏßÑ Ï¥¨ÏòÅ ÏôÑÎ£å!", {
                                icon: "üì∏",
                                style: {
                                    borderRadius: "10px",
                                    background: "#3a3232",
                                    color: "#fffaf2",
                                },
                                duration: 2000,
                            });
                            setSaveDisabled(false);
                        }
                    );
                }, 3000);
            });
    };

    return (
        <StDiv photoShootBox>
            <Toaster />
            <StDiv captureArea>
                <StDiv frameBox>
                    <StImg src={rooms?.frameUrl} alt="frame url" />
                    <StDiv pictureBox>
                        <StVideo
                            picture
                            id="picture1"
                            ref={videoRef}
                            autoPlay
                            playsInline
                            muted
                        />
                    </StDiv>
                </StDiv>
            </StDiv>
            <StDiv downBtns>
                <StDiv setBox>
                    <StDiv nameIcon>
                        <MdMeetingRoom size={40} />
                        <Span roomName>{videoRooms.roomName}</Span>
                    </StDiv>
                    <StP counterTxt>
                        üö® 1Ïù∏Ïö©ÏùÄ 4Í∞ú Î≤ÑÌäºÏùÑ Ï∞®Î°ÄÎ°ú ÎàåÎü¨
                        <br />
                        <Span txtBold>Ï¥ù 4Ïû•Ïùò ÏÇ¨ÏßÑ</Span>ÏùÑ Ï∞çÏùÄ ÌõÑ
                        <br /> Ï†ÑÏÜ°ÌïòÍ∏∞ ÌéòÏù¥ÏßÄÏóêÏÑú
                        <br />
                        Ï†ÑÏ≤¥ ÏÇ¨ÏßÑÏùÑ ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§!
                        <br />
                        üö® <Span txtBold>Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Í∏∞ Ï†Ñ</Span> Ìè¨Ï¶àÎ•º
                        Ï∑®Ìï¥Ï£ºÏÑ∏Ïöî! <br /> ÌòÑÏû¨ Î≤ÑÌäºÏùÑ ÎàÑÎ•¥ÏûêÎßàÏûê ÏÇ¨ÏßÑÏù¥
                        Ï¥¨ÏòÅÎê©ÎãàÎã§ <br /> Ïò§Î•ò ÏàòÏ†ïÏ§ëÏóê ÏûàÏäµÎãàÎã§ „Ö†„Ö†
                        <br />
                        üö® Ïà´ÏûêÍ∞Ä Ï§ÑÏñ¥Îì§ ÎïåÎßàÎã§ ÌôîÎ©¥Ïóê Î≥¥Ïù¥Îäî Ïà´ÏûêÎ•º
                        <br />
                        <Span txtBold>ÌÅ∞ ÏÜåÎ¶¨Î°ú</Span> ÏπúÍµ¨Îì§ÏóêÍ≤å Ïô∏Ï≥êÏ£ºÏÑ∏Ïöî!
                        <br />
                        üö® ÌòπÏãú Ïà´ÏûêÍ∞Ä Ï§ÑÏñ¥Îì§ÏßÄ ÏïäÏúºÎ©¥
                        <br />
                        <Span txtBold>ÌïúÎ≤à Îçî ÌÅ¥Î¶≠</Span>Ìï¥Ï£ºÏÑ∏Ïöî!
                    </StP>
                </StDiv>
                <StP countNum>{number}</StP>
                <StDiv allBtn>
                    <StDiv btnBox>
                        <Button
                            cameraBtn1
                            disabled={oneDis}
                            oneDis={oneDis}
                            onClick={() => {
                                onSubmitHandler_1(roomId);
                            }}
                        >
                            1Î≤à ÏÇ¨ÏßÑ Ï¥¨ÏòÅ
                        </Button>
                        <Button
                            cameraBtn2
                            disabled={twoDis}
                            twoDis={twoDis}
                            onClick={() => {
                                onSubmitHandler_2(roomId);
                            }}
                        >
                            2Î≤à ÏÇ¨ÏßÑ Ï¥¨ÏòÅ
                        </Button>
                        <Button
                            cameraBtn3
                            disabled={threeDis}
                            threeDis={threeDis}
                            onClick={() => {
                                onSubmitHandler_3(roomId);
                            }}
                        >
                            3Î≤à ÏÇ¨ÏßÑ Ï¥¨ÏòÅ
                        </Button>
                        <Button
                            cameraBtn4
                            disabled={fourDis}
                            fourDis={fourDis}
                            onClick={() => {
                                onSubmitHandler_4(roomId);
                            }}
                        >
                            4Î≤à ÏÇ¨ÏßÑ Ï¥¨ÏòÅ
                        </Button>
                    </StDiv>
                    <StDiv otherBtn>
                        <Button
                            photoTrans
                            disabled={saveDisabled}
                            saveDisabled={saveDisabled}
                            onClick={pageMoveHandler}
                        >
                            ÏÇ¨ÏßÑ Ï†ÑÏÜ°ÌïòÎü¨ Í∞ÄÍ∏∞
                        </Button>
                        <Button
                            photoTrans
                            onClick={() => outRoomsHandler(roomId)}
                        >
                            Î∞© ÎÇòÍ∞ÄÍ∏∞
                        </Button>
                    </StDiv>
                </StDiv>
            </StDiv>
        </StDiv>
    );
};

const StDiv = styled.div`
    ${(props) =>
        props.photoShootBox &&
        css`
            display: flex;
            align-items: center;
            gap: 20px;
        `}
    ${(props) =>
        props.captureArea &&
        css`
            background-color: #eee8dc;
            width: 500px;
            height: 750px;
            margin-bottom: 20px;
        `}
        ${(props) =>
        props.frameBox &&
        css`
            position: relative;
        `}
    ${(props) =>
        props.pictureBox &&
        css`
            position: absolute;
            top: 85px;
            left: 35px;
            z-index: 100;
        `}
    ${(props) =>
        props.setBox &&
        css`
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 10px 0;
        `}
    ${(props) =>
        props.downBtns &&
        css`
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            align-items: center;
            width: 300px;
            height: 750px;
        `}
    ${(props) =>
        props.counter &&
        css`
            display: flex;
            flex-direction: column;
            align-items: center;
        `}
    ${(props) =>
        props.allBtn &&
        css`
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        `}
        ${(props) =>
        props.btnBox &&
        css`
            width: 300px;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 10px;
        `}
        ${(props) =>
        props.otherBtn &&
        css`
            display: flex;
            flex-direction: column;
            gap: 10px;
        `}
        ${(props) =>
        props.nameIcon &&
        css`
            display: flex;
            justify-content: center;
            align-items: center;
        `}
`;

const StImg = styled.img`
    position: absolute;
    top: 0;
    left: 0;
`;

const StVideo = styled.video`
    ${(props) =>
        props.picture &&
        css`
            width: 430px;
            height: 630px;
        `}
`;

const StP = styled.p`
    ${(props) =>
        props.inviteCode &&
        css`
            border-radius: 10px;
            background-color: #3a3232;
            color: #fffaf2;
            width: 200px;
            height: 50px;
            text-align: center;
            line-height: 50px;
            cursor: pointer;
        `}
    ${(props) =>
        props.counterTxt &&
        css`
            margin: 0;
            padding: 0 10px;
            color: #3a3232;
            border: 1px solid #3a3232
            border-radius: 10px;
            text-align: center;
            font-size: 13px;
        `}
        ${(props) =>
        props.countNum &&
        css`
            margin: 10px 0 30px 0;
            font-size: 50px;
            font-weight: bold;
        `}
`;
export default OneCamera;
